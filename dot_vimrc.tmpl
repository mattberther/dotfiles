set encoding=utf-8
set nocompatible            " required
let mapleader=";"
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-unimpaired'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-abolish'

" writing
Plugin 'kana/vim-textobj-user'
Plugin 'reedes/vim-textobj-quote'
Plugin 'reedes/vim-textobj-sentence'
Plugin 'reedes/vim-litecorrect'
Plugin 'reedes/vim-wordy'
Plugin 'reedes/vim-pencil'
Plugin 'reedes/vim-lexical'
Plugin 'dbmrq/vim-ditto'

" development
Plugin 'fatih/vim-go'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'Chiel92/vim-autoformat'
Plugin 'mattn/emmet-vim'

" python
Plugin 'Vimjas/vim-python-pep8-indent'
Plugin 'nvie/vim-flake8'
Plugin 'michaeljsmith/vim-indent-object'

" colorschemes
Plugin 'arcticicestudio/nord-vim'
Plugin 'connorholyday/vim-snazzy'
Plugin 'vim-airline/vim-airline'


" all of your plugins must be added before the following line
call vundle#end()

set splitbelow
set splitright

let g:nord_cursor_line_number_background = 1

set background=dark
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set t_ut=
    set termguicolors
endif
syntax enable
colorscheme nord

filetype plugin indent on

set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set laststatus=2
"------------Start Python PEP 8 stuff----------------
" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Wrap text after a certain number of characters
au BufRead,BufNewFile *.py,*.pyw, set textwidth=100

" Use UNIX (\n) line endings.
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

au BufWrite *.py,*.pyw :Autoformat

" For full syntax highlighting:
let python_highlight_all=1

" Keep indentation level from previous line:
autocmd FileType python set autoindent

"----------Stop python PEP 8 stuff--------------

au BufWrite *.js :Autoformat
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
map <leader>f :Autoformat<CR>

autocmd FileType markdown,mkd let g:markdown_folding=1
set foldlevelstart=99
set foldlevel=99


let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
map <C-g> :NERDTreeToggle<CR>

set noswapfile

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc

if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    let g:ctrlp_show_hidden = 1
    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif

map <F7> :set linebreak<cr>:set display+=lastline<cr>:set wrap<cr>:setlocal spell spelllang=en_us<cr>
map <F8> :set nowrap<cr>:set nospell<cr>

"let g:autoformat_verbosemode=1

set number relativenumber
nnoremap <silent> <F3> :set number! relativenumber!<CR>

set autowrite
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
let g:go_fmt_command = "goimports"


function! Prose()
    call pencil#init()
    call lexical#init()
    call litecorrect#init()
    call textobj#quote#init({'educate': 0})
    call textobj#sentence#init()

    " manual reformatting shortcuts
    nnoremap <buffer> <silent> Q gqap
    xnoremap <buffer> <slient> Q gq
    nnoremap <buffer> <silent> <leader>Q vapJgqap

    " force top correction on most recent misspelling
    nnoremap <buffer> <c-s> [s1z=<c-o>
    inoremap <buffer> <c-s> <c-g>u<Esc>[s1z=`]A<c-g>u

    " replace common punctuation
    iabbrev <buffer> -- –
    iabbrev <buffer> --- —
    iabbrev <buffer> << «
    iabbrev <buffer> >> »

    map <silent> <buffer> <leader>qc <Plug>ReplaceWithCurly
    map <silent> <buffer> <leader>qs <Plug>ReplaceWithStraight
endfunction

" invoke manually by command for other file types
command! -nargs=0 Prose call Prose()
